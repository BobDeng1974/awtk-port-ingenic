diff --git a/src/awtk_global.c b/src/awtk_global.c
index e79b840..05a0c26 100644
--- a/src/awtk_global.c
+++ b/src/awtk_global.c
@@ -306,11 +306,10 @@ ret_t tk_set_lcd_orientation(lcd_orientation_t orientation) {
   return_value_if_fail(loop != NULL && info != NULL, RET_OK);
 
   if (info->lcd_orientation != orientation) {
+    system_info_set_lcd_orientation(info, orientation);
     orientation_event_t e;
     orientation_event_init(&e, EVT_ORIENTATION_WILL_CHANGED, NULL, orientation);
     widget_dispatch(window_manager(), (event_t*)&e);
-
-    system_info_set_lcd_orientation(info, orientation);
   }
 
   return RET_OK;
diff --git a/src/vgcanvas/texture.inc b/src/vgcanvas/texture.inc
index 701f5f8..8c2741c 100644
--- a/src/vgcanvas/texture.inc
+++ b/src/vgcanvas/texture.inc
@@ -25,7 +25,25 @@ static int vgcanvas_nanovg_ensure_image(vgcanvas_nanovg_t* canvas, bitmap_t* img
 
     if (img->flags & BITMAP_FLAG_CHANGED) {
       img->flags &= (~(BITMAP_FLAG_CHANGED));
-      nvgUpdateImage(canvas->vg, i, img_data);
+      if (bpp * img->w == img->line_length) {
+        data = (uint8_t*)(img_data);
+      } else {
+        uint32_t size = 0;
+        size = bpp * img->w * img->h;
+        size = TK_ROUND_TO(size, BITMAP_ALIGN_SIZE) + BITMAP_ALIGN_SIZE;
+        data = (uint8_t*)TKMEM_ALLOC(size);
+        memset(data, 0x00, size);
+        int j;
+        for (j = 0; j < img->h; j++) {
+          memcpy(data + j * img->w * bpp, img_data + j * img->line_length, img->w * bpp);
+        }
+      }
+
+      nvgUpdateImage(canvas->vg, i, data);
+
+      if (data != img_data) {
+        TKMEM_FREE(data);
+      }
       log_debug("nvgUpdateImage %d\n", i);
     }
     bitmap_unlock_buffer(img);
@@ -47,7 +65,7 @@ static int vgcanvas_nanovg_ensure_image(vgcanvas_nanovg_t* canvas, bitmap_t* img
     }
   }
 
-  i = nvgCreateImageRGBA(canvas->vg, img->w, img->h, NVG_IMAGE_NEAREST, img_data);
+  i = nvgCreateImageRGBA(canvas->vg, img->w, img->h, 0, data);
 
   if (data != img_data) {
     TKMEM_FREE(data);
diff --git a/src/vgcanvas/vgcanvas_nanovg_gl.c b/src/vgcanvas/vgcanvas_nanovg_gl.c
index cd6ca94..aa3e48a 100644
--- a/src/vgcanvas/vgcanvas_nanovg_gl.c
+++ b/src/vgcanvas/vgcanvas_nanovg_gl.c
@@ -352,12 +352,18 @@ static vgcanvas_nanovg_offline_fb_t* vgcanvas_create_offline_fb(uint32_t width,
 #include "texture.inc"
 #include "vgcanvas_nanovg_gl.inc"
 #include "vgcanvas_nanovg.inc"
+static ret_t vgcanvas_init_gl(void)
+{
+	gladLoadGL();
+	glEnable(GL_ALPHA_TEST);
+	glEnable(GL_STENCIL_TEST);
+	glEnable(GL_DEPTH_TEST);
+
+	return RET_OK;
+}
 
 vgcanvas_t* vgcanvas_create(uint32_t w, uint32_t h, uint32_t stride, bitmap_format_t format,
-                            void* win) {
-  native_window_info_t info;
-  native_window_t* window = NATIVE_WINDOW(win);
-  return_value_if_fail(native_window_get_info(win, &info) == RET_OK, NULL);
+                            void* data) {
   vgcanvas_nanovg_t* nanovg = (vgcanvas_nanovg_t*)TKMEM_ZALLOC(vgcanvas_nanovg_t);
   return_value_if_fail(nanovg != NULL, NULL);
 
@@ -366,9 +372,10 @@ vgcanvas_t* vgcanvas_create(uint32_t w, uint32_t h, uint32_t stride, bitmap_form
   nanovg->base.w = w;
   nanovg->base.h = h;
   nanovg->base.vt = &vt;
-  nanovg->window = window;
-  nanovg->base.ratio = info.ratio;
+  nanovg->base.ratio = 1;
+  nanovg->base.buff = (uint32_t*)data;
 
+  vgcanvas_init_gl();
 #if defined(WITH_NANOVG_GL3)
   nanovg->vg = nvgCreateGL3(NVG_ANTIALIAS | NVG_STENCIL_STROKES);
 #elif defined(WITH_NANOVG_GLES2)
@@ -382,7 +389,7 @@ vgcanvas_t* vgcanvas_create(uint32_t w, uint32_t h, uint32_t stride, bitmap_form
   }
 
   nanovg->shader_program = vgcanvas_create_init_screen_shader();
-  nanovg->offline_fb = vgcanvas_create_offline_fb(w * info.ratio, h * info.ratio);
+  nanovg->offline_fb = vgcanvas_create_offline_fb(w, h);
 
   return &(nanovg->base);
 }
diff --git a/src/vgcanvas/vgcanvas_nanovg_gl.inc b/src/vgcanvas/vgcanvas_nanovg_gl.inc
index ba0f17d..9564281 100644
--- a/src/vgcanvas/vgcanvas_nanovg_gl.inc
+++ b/src/vgcanvas/vgcanvas_nanovg_gl.inc
@@ -37,9 +37,17 @@ static inline void vgcanvas_nanovg_offline_fb_flush(vgcanvas_nanovg_t* canvas) {
   vgcanvas_nanovg_screen_shader_info_t* shader_info = canvas->shader_program;
   if (offline_fb != NULL && shader_info != NULL) {
     glBindFramebuffer(GL_FRAMEBUFFER, offline_fb->last_fbo);
-
-    glViewport(0, 0, info->lcd_w * info->device_pixel_ratio,
-               info->lcd_h * info->device_pixel_ratio);
+    lcd_orientation_t orientation = info->lcd_orientation;
+    int w = info->lcd_w;
+    int h = info->lcd_h;
+#if defined WITH_JZGPU
+    if (orientation == LCD_ORIENTATION_90 || orientation == LCD_ORIENTATION_270) {
+      w = info->lcd_h;
+      h = info->lcd_w;
+    }
+#endif
+    glViewport(0, 0, w * info->device_pixel_ratio,
+               h * info->device_pixel_ratio);
 
     glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
@@ -79,49 +87,17 @@ static inline void vgcanvas_nanovg_offline_fb_flush(vgcanvas_nanovg_t* canvas) {
 }
 
 static ret_t vgcanvas_nanovg_begin_frame(vgcanvas_t* vgcanvas, rect_t* dirty_rect) {
-  float_t angle = 0.0f;
-  float_t anchor_x = 0.0f;
-  float_t anchor_y = 0.0f;
-
-  system_info_t* info = system_info();
   vgcanvas_nanovg_t* canvas = (vgcanvas_nanovg_t*)vgcanvas;
+  NVGcontext* vg = canvas->vg;
 
-  native_window_gl_make_current(canvas->window);
-
-  vgcanvas_nanovg_set_offline_fb(canvas, info->lcd_w * info->device_pixel_ratio,
-                                 info->lcd_h * info->device_pixel_ratio);
-
-  nvgBeginFrame(canvas->vg, info->lcd_w, info->lcd_h, info->device_pixel_ratio);
-
-  switch (info->lcd_orientation) {
-    case LCD_ORIENTATION_0:
-      angle = 0.0f;
-      break;
-    case LCD_ORIENTATION_90:
-      angle = TK_D2R(90);
-      break;
-    case LCD_ORIENTATION_180:
-      angle = TK_D2R(180);
-      break;
-    case LCD_ORIENTATION_270:
-      angle = TK_D2R(270);
-      break;
-  }
+  glViewport(0, 0, vgcanvas->w, vgcanvas->h);
+  glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
 
-  anchor_x = info->lcd_w / 2.0f;
-  anchor_y = info->lcd_h / 2.0f;
+  vgcanvas_nanovg_set_offline_fb(canvas, vgcanvas->w * vgcanvas->ratio,
+                                 vgcanvas->h * vgcanvas->ratio);
 
-  nvgSave(canvas->vg);
-
-  if (info->lcd_orientation == LCD_ORIENTATION_90 || info->lcd_orientation == LCD_ORIENTATION_270) {
-    nvgTranslate(canvas->vg, anchor_x, anchor_y);
-    nvgRotate(canvas->vg, angle);
-    nvgTranslate(canvas->vg, -anchor_y, -anchor_x);
-  } else if (info->lcd_orientation == LCD_ORIENTATION_180) {
-    nvgTranslate(canvas->vg, anchor_x, anchor_y);
-    nvgRotate(canvas->vg, angle);
-    nvgTranslate(canvas->vg, -anchor_x, -anchor_y);
-  }
+  nvgBeginFrame(vg, vgcanvas->w, vgcanvas->h, vgcanvas->ratio);
 
   return RET_OK;
 }
@@ -130,13 +106,10 @@ static ret_t vgcanvas_nanovg_end_frame(vgcanvas_t* vgcanvas) {
   vgcanvas_nanovg_t* canvas = (vgcanvas_nanovg_t*)vgcanvas;
   NVGcontext* vg = canvas->vg;
 
-  nvgRestore(vg);
   nvgEndFrame(vg);
 
   vgcanvas_nanovg_offline_fb_flush(canvas);
 
-  native_window_swap_buffer(canvas->window);
-
   return RET_OK;
 }
 
diff --git a/src/vgcanvas/vgcanvas_nanovg_soft.inc b/src/vgcanvas/vgcanvas_nanovg_soft.inc
index 5c9270e..91c397b 100644
--- a/src/vgcanvas/vgcanvas_nanovg_soft.inc
+++ b/src/vgcanvas/vgcanvas_nanovg_soft.inc
@@ -133,7 +133,7 @@ static int vgcanvas_nanovg_ensure_image(vgcanvas_nanovg_t* canvas, bitmap_t* img
     }
   }
 
-  i = nvgCreateImageRaw(canvas->vg, img->w, img->h, f, NVG_IMAGE_NEAREST, img_data);
+  i = nvgCreateImageRaw(canvas->vg, img->line_length/f, img->h, f, 0, data);
 
   if (data != img_data) {
     TKMEM_FREE(data);
