diff --git a/3rd/nanovg/gl/nanovg_gl.h b/3rd/nanovg/gl/nanovg_gl.h
index 0aabec6..11649fa 100644
--- a/3rd/nanovg/gl/nanovg_gl.h
+++ b/3rd/nanovg/gl/nanovg_gl.h
@@ -521,7 +521,7 @@ static int glnvg__renderCreate(void* uptr) {
       "void main(void) {\n"
       " ftcoord = tcoord;\n"
       " fpos = vertex;\n"
-      " gl_Position = vec4(2.0*vertex.x/viewSize.x - 1.0, 1.0 - 2.0*vertex.y/viewSize.y, 0, 1);\n"
+      " gl_Position = vec4(2.0*vertex.x/viewSize.x - 1.0, 2.0*vertex.y/viewSize.y - 1.0, 0, 1);\n"
       "}\n";
 
   static const char* fillFragShader =
@@ -713,6 +713,7 @@ static int glnvg__renderCreate(void* uptr) {
 
   return 1;
 }
+#define GL_BGRA_EXT                       0x80E1
 
 static int glnvg__renderCreateTexture(void* uptr, int type, int w, int h, int imageFlags,
                                       const unsigned char* data) {
@@ -757,9 +758,10 @@ static int glnvg__renderCreateTexture(void* uptr, int type, int w, int h, int im
     glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
   }
 #endif
+  //glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
 
   if (type == NVG_TEXTURE_RGBA)
-    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
+    glTexImage2D(GL_TEXTURE_2D, 0, GL_BGRA_EXT, w, h, 0, GL_BGRA_EXT, GL_UNSIGNED_BYTE, data);
   else
 #if defined(NANOVG_GLES2) || defined(NANOVG_GL2)
     glTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE, w, h, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, data);
@@ -1162,7 +1164,7 @@ static void glnvg__renderFlush(void* uptr) {
     glUseProgram(gl->shader.prog);
 
     glEnable(GL_CULL_FACE);
-    glCullFace(GL_BACK);
+    glCullFace(GL_FRONT);
     glFrontFace(GL_CCW);
     glEnable(GL_BLEND);
     glDisable(GL_DEPTH_TEST);
diff --git a/src/awtk_global.c b/src/awtk_global.c
index e79b840..9a92021 100644
--- a/src/awtk_global.c
+++ b/src/awtk_global.c
@@ -306,11 +306,12 @@ ret_t tk_set_lcd_orientation(lcd_orientation_t orientation) {
   return_value_if_fail(loop != NULL && info != NULL, RET_OK);
 
   if (info->lcd_orientation != orientation) {
+    system_info_set_lcd_orientation(info, orientation);
     orientation_event_t e;
     orientation_event_init(&e, EVT_ORIENTATION_WILL_CHANGED, NULL, orientation);
     widget_dispatch(window_manager(), (event_t*)&e);
 
-    system_info_set_lcd_orientation(info, orientation);
+    //system_info_set_lcd_orientation(info, orientation);
   }
 
   return RET_OK;
diff --git a/src/graphic_buffer/graphic_buffer_jzgpu.c b/src/graphic_buffer/graphic_buffer_jzgpu.c
index b29bd4d..eb02c68 100644
--- a/src/graphic_buffer/graphic_buffer_jzgpu.c
+++ b/src/graphic_buffer/graphic_buffer_jzgpu.c
@@ -26,12 +26,12 @@
 #ifdef WITH_JZGPU
 /**
  * @class graphic_buffer_jzgpu_t
- * graphic_buffer jzgpu 
+ * graphic_buffer jzgpu
  */
 typedef struct _graphic_buffer_jzgpu_t {
   graphic_buffer_t graphic_buffer;
   uint8_t* data;
-  void* handle;
+  void* pwdata;
 } graphic_buffer_jzgpu_t;
 
 #define GRAPHIC_BUFFER_JZGPU(buffer) ((graphic_buffer_jzgpu_t*)(buffer))
@@ -57,6 +57,7 @@ static ret_t graphic_buffer_jzgpu_unlock(graphic_buffer_t* buffer) {
 static ret_t graphic_buffer_jzgpu_destroy(graphic_buffer_t* buffer) {
   graphic_buffer_jzgpu_t* b = GRAPHIC_BUFFER_JZGPU(buffer);
   return_value_if_fail(b != NULL, RET_BAD_PARAMS);
+  gpu2d_free_buffer(b);
 
   /*TODO*/
   TKMEM_FREE(b);
@@ -80,7 +81,7 @@ static graphic_buffer_t* graphic_buffer_jzgpu_create(uint32_t w, uint32_t h, bit
 
   buffer = TKMEM_ZALLOC(graphic_buffer_jzgpu_t);
   return_value_if_fail(buffer != NULL, NULL);
-  buffer->graphic_buffer.vt = &s_graphic_buffer_default_vtable;
+  buffer->graphic_buffer.vt = &s_graphic_buffer_jzgpu_vtable;
 
   /*TODO*/
   return GRAPHIC_BUFFER(buffer);
@@ -106,6 +107,7 @@ ret_t graphic_buffer_create_for_bitmap(bitmap_t* bitmap) {
 
   bitmap->buffer = graphic_buffer_jzgpu_create(bitmap->w, bitmap->h,
                                                  (bitmap_format_t)(bitmap->format), line_length);
+  gpu2d_alloc_buffer(bitmap);
   bitmap->should_free_data = bitmap->buffer != NULL;
 
   return bitmap->buffer != NULL ? RET_OK : RET_OOM;
diff --git a/src/vgcanvas/texture.inc b/src/vgcanvas/texture.inc
index 701f5f8..7feae7c 100644
--- a/src/vgcanvas/texture.inc
+++ b/src/vgcanvas/texture.inc
@@ -47,7 +47,7 @@ static int vgcanvas_nanovg_ensure_image(vgcanvas_nanovg_t* canvas, bitmap_t* img
     }
   }
 
-  i = nvgCreateImageRGBA(canvas->vg, img->w, img->h, NVG_IMAGE_NEAREST, img_data);
+  i = nvgCreateImageRGBA(canvas->vg, img->w, img->h, 0, data);
 
   if (data != img_data) {
     TKMEM_FREE(data);
diff --git a/src/vgcanvas/vgcanvas_nanovg_gl.c b/src/vgcanvas/vgcanvas_nanovg_gl.c
index bae0254..cb5b585 100644
--- a/src/vgcanvas/vgcanvas_nanovg_gl.c
+++ b/src/vgcanvas/vgcanvas_nanovg_gl.c
@@ -40,10 +40,11 @@
 #include "tkc/mem.h"
 #include "base/vgcanvas.h"
 #include "base/image_manager.h"
-#include "base/native_window.h"
+#include "base/assets_manager.h"
 
 #include "nanovg_gl.h"
 #include "nanovg_gl_utils.h"
+/* #include <EGL/egl.h> */
 
 typedef struct _vgcanvas_nanovg_t {
   vgcanvas_t base;
@@ -52,19 +53,23 @@ typedef struct _vgcanvas_nanovg_t {
   NVGcontext* vg;
   uint32_t text_align_v;
   uint32_t text_align_h;
-
-  native_window_t* window;
 } vgcanvas_nanovg_t;
 
 #include "texture.inc"
 #include "vgcanvas_nanovg_gl.inc"
 #include "vgcanvas_nanovg.inc"
+static ret_t vgcanvas_init_gl(void)
+{
+	gladLoadGL();
+	glEnable(GL_ALPHA_TEST);
+	glEnable(GL_STENCIL_TEST);
+	glEnable(GL_DEPTH_TEST);
+
+	return RET_OK;
+}
 
 vgcanvas_t* vgcanvas_create(uint32_t w, uint32_t h, uint32_t stride, bitmap_format_t format,
-                            void* win) {
-  native_window_info_t info;
-  native_window_t* window = NATIVE_WINDOW(win);
-  return_value_if_fail(native_window_get_info(win, &info) == RET_OK, NULL);
+                            void* data) {
   vgcanvas_nanovg_t* nanovg = (vgcanvas_nanovg_t*)TKMEM_ZALLOC(vgcanvas_nanovg_t);
   return_value_if_fail(nanovg != NULL, NULL);
 
@@ -73,9 +78,10 @@ vgcanvas_t* vgcanvas_create(uint32_t w, uint32_t h, uint32_t stride, bitmap_form
   nanovg->base.w = w;
   nanovg->base.h = h;
   nanovg->base.vt = &vt;
-  nanovg->window = window;
-  nanovg->base.ratio = info.ratio;
+  nanovg->base.ratio = 1;
+  nanovg->base.buff = (uint32_t*)data;
 
+  vgcanvas_init_gl();
 #if defined(WITH_NANOVG_GL3)
   nanovg->vg = nvgCreateGL3(NVG_ANTIALIAS | NVG_STENCIL_STROKES);
 #elif defined(WITH_NANOVG_GLES2)
diff --git a/src/vgcanvas/vgcanvas_nanovg_gl.inc b/src/vgcanvas/vgcanvas_nanovg_gl.inc
index 0ec0257..1a1efdc 100644
--- a/src/vgcanvas/vgcanvas_nanovg_gl.inc
+++ b/src/vgcanvas/vgcanvas_nanovg_gl.inc
@@ -9,48 +9,14 @@ static ret_t vgcanvas_nanovg_reinit(vgcanvas_t* vg, uint32_t w, uint32_t h, uint
 }
 
 static ret_t vgcanvas_nanovg_begin_frame(vgcanvas_t* vgcanvas, rect_t* dirty_rect) {
-  float_t angle = 0.0f;
-  float_t anchor_x = 0.0f;
-  float_t anchor_y = 0.0f;
-
-  system_info_t* info = system_info();
   vgcanvas_nanovg_t* canvas = (vgcanvas_nanovg_t*)vgcanvas;
+  NVGcontext* vg = canvas->vg;
+
+  glViewport(0, 0, vgcanvas->w, vgcanvas->h);
+  glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
 
-  native_window_gl_make_current(canvas->window);
-  
-  nvgBeginFrame(canvas->vg, info->lcd_w, info->lcd_h, info->device_pixel_ratio);
-
-  switch (info->lcd_orientation)
-  {
-    case LCD_ORIENTATION_0: 
-      angle = 0.0f;
-      break;
-    case LCD_ORIENTATION_90: 
-      angle = TK_D2R(90);
-      break;
-    case LCD_ORIENTATION_180: 
-      angle = TK_D2R(180);
-      break;
-    case LCD_ORIENTATION_270: 
-      angle = TK_D2R(270);
-      break;
-  }
-
-  anchor_x = info->lcd_w / 2.0f;
-  anchor_y = info->lcd_h / 2.0f;
-
-  nvgSave(canvas->vg);
-  
-  if(info->lcd_orientation == LCD_ORIENTATION_90 || info->lcd_orientation == LCD_ORIENTATION_270) {
-    nvgTranslate(canvas->vg, anchor_x, anchor_y);
-    nvgRotate(canvas->vg, angle);
-    nvgTranslate(canvas->vg, -anchor_y, -anchor_x);
-  }
-  else if(info->lcd_orientation == LCD_ORIENTATION_180) {
-    nvgTranslate(canvas->vg, anchor_x, anchor_y);
-    nvgRotate(canvas->vg, angle);
-    nvgTranslate(canvas->vg, -anchor_x, -anchor_y);
-  }
+  nvgBeginFrame(vg, vgcanvas->w, vgcanvas->h, vgcanvas->ratio);
 
   return RET_OK;
 }
@@ -59,9 +25,7 @@ static ret_t vgcanvas_nanovg_end_frame(vgcanvas_t* vgcanvas) {
   vgcanvas_nanovg_t* canvas = (vgcanvas_nanovg_t*)vgcanvas;
   NVGcontext* vg = canvas->vg;
 
-  nvgRestore(vg);
   nvgEndFrame(vg);
-  native_window_swap_buffer(canvas->window);
 
   return RET_OK;
 }
diff --git a/src/vgcanvas/vgcanvas_nanovg_soft.inc b/src/vgcanvas/vgcanvas_nanovg_soft.inc
index 5c9270e..6e70776 100644
--- a/src/vgcanvas/vgcanvas_nanovg_soft.inc
+++ b/src/vgcanvas/vgcanvas_nanovg_soft.inc
@@ -133,7 +133,8 @@ static int vgcanvas_nanovg_ensure_image(vgcanvas_nanovg_t* canvas, bitmap_t* img
     }
   }
 
-  i = nvgCreateImageRaw(canvas->vg, img->w, img->h, f, NVG_IMAGE_NEAREST, img_data);
+  i = nvgCreateImageRaw(canvas->vg, img->line_length/f, img->h, f, 0, data);
+  //i = nvgCreateImageRaw(canvas->vg, img->w, img->h, f, NVG_IMAGE_NEAREST, img->data);
 
   if (data != img_data) {
     TKMEM_FREE(data);
diff --git a/src/window_animators/window_animator_common.c b/src/window_animators/window_animator_common.c
index 64971fe..99093bb 100644
--- a/src/window_animators/window_animator_common.c
+++ b/src/window_animators/window_animator_common.c
@@ -104,7 +104,7 @@ static ret_t window_animator_draw_prev_window(window_animator_t* wa);
 static ret_t window_animator_draw_curr_window(window_animator_t* wa);
 
 static ret_t window_animator_open_destroy(window_animator_t* wa) {
-#ifdef WITH_NANOVG_GPU
+#if 0 //ndef WITH_NANOVG_GPU
   vgcanvas_t* vg = lcd_get_vgcanvas(wa->canvas->lcd);
   if (wa->dialog_highlighter == NULL) {
     vgcanvas_destroy_fbo(vg, &(wa->prev_fbo));
@@ -192,7 +192,7 @@ static ret_t window_animator_paint_system_bar(window_animator_t* wa) {
 
 #include <stdio.h>
 static ret_t window_animator_begin_frame_normal(window_animator_t* wa) {
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   ENSURE(canvas_begin_frame(wa->canvas, NULL, LCD_DRAW_ANIMATION) == RET_OK);
 #else
   rect_t r;
@@ -205,7 +205,7 @@ static ret_t window_animator_begin_frame_normal(window_animator_t* wa) {
 }
 
 static ret_t window_animator_begin_frame_overlap(window_animator_t* wa) {
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   ENSURE(canvas_begin_frame(wa->canvas, NULL, LCD_DRAW_ANIMATION) == RET_OK);
 #else
   rect_t r;
@@ -317,7 +317,10 @@ static ret_t window_animator_draw_prev_window(window_animator_t* wa) {
 
     return dialog_highlighter_draw(wa->dialog_highlighter, percent);
   } else {
-    return wa->vt->draw_prev_window(wa);
+    widget_on_paint_background(window_manager(), wa->canvas);
+    ret_t ret = wa->vt->draw_prev_window(wa);
+    window_animator_paint_system_bar(wa);
+    return ret;
   }
 }
 
diff --git a/src/window_manager/window_manager_default.c b/src/window_manager/window_manager_default.c
index 28a4b0c..8103e35 100644
--- a/src/window_manager/window_manager_default.c
+++ b/src/window_manager/window_manager_default.c
@@ -146,7 +146,7 @@ static widget_t* window_manager_find_prev_any_window(widget_t* widget) {
 ret_t window_manager_default_snap_curr_window(widget_t* widget, widget_t* curr_win, bitmap_t* img,
                                               framebuffer_object_t* fbo, bool_t auto_rotate) {
   canvas_t* c = NULL;
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   vgcanvas_t* vg = NULL;
 #else
   rect_t r = {0};
@@ -158,7 +158,7 @@ ret_t window_manager_default_snap_curr_window(widget_t* widget, widget_t* curr_w
 
   c = native_window_get_canvas(wm->native_window);
 
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   vg = lcd_get_vgcanvas(c->lcd);
   ENSURE(vgcanvas_create_fbo(vg, fbo) == RET_OK);
   ENSURE(vgcanvas_bind_fbo(vg, fbo) == RET_OK);
@@ -169,11 +169,11 @@ ret_t window_manager_default_snap_curr_window(widget_t* widget, widget_t* curr_w
 #else
   r = rect_init(curr_win->x, curr_win->y, curr_win->w, curr_win->h);
   ENSURE(canvas_begin_frame(c, &r, LCD_DRAW_OFFLINE) == RET_OK);
-  canvas_set_clip_rect(c, &r);
   ENSURE(widget_on_paint_background(widget, c) == RET_OK);
+  canvas_set_clip_rect(c, &r);
   ENSURE(widget_paint(curr_win, c) == RET_OK);
-  ENSURE(lcd_take_snapshot(c->lcd, img, auto_rotate) == RET_OK);
   ENSURE(canvas_end_frame(c) == RET_OK);
+  ENSURE(lcd_take_snapshot(c->lcd, img, auto_rotate) == RET_OK);
 #endif
 
   return RET_OK;
@@ -182,7 +182,7 @@ ret_t window_manager_default_snap_curr_window(widget_t* widget, widget_t* curr_w
 ret_t window_manager_default_snap_prev_window(widget_t* widget, widget_t* prev_win, bitmap_t* img,
                                               framebuffer_object_t* fbo, bool_t auto_rotate) {
   canvas_t* c = NULL;
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   vgcanvas_t* vg = NULL;
 #else
   rect_t r = {0};
@@ -197,7 +197,7 @@ ret_t window_manager_default_snap_prev_window(widget_t* widget, widget_t* prev_w
   c = native_window_get_canvas(wm->native_window);
   dialog_highlighter = wm->dialog_highlighter;
 
-#ifdef WITH_NANOVG_GPU
+#if 0 //def WITH_NANOVG_GPU
   vg = lcd_get_vgcanvas(c->lcd);
   ENSURE(vgcanvas_create_fbo(vg, fbo) == RET_OK);
   ENSURE(vgcanvas_bind_fbo(vg, fbo) == RET_OK);
@@ -213,15 +213,15 @@ ret_t window_manager_default_snap_prev_window(widget_t* widget, widget_t* prev_w
 #else
   r = rect_init(prev_win->x, prev_win->y, prev_win->w, prev_win->h);
   ENSURE(canvas_begin_frame(c, &r, LCD_DRAW_OFFLINE) == RET_OK);
-  canvas_set_clip_rect(c, &r);
   ENSURE(widget_on_paint_background(widget, c) == RET_OK);
   window_manager_paint_system_bar(widget, c);
+  canvas_set_clip_rect(c, &r);
   ENSURE(widget_paint(prev_win, c) == RET_OK);
   if (dialog_highlighter != NULL) {
     dialog_highlighter_prepare(dialog_highlighter, c);
   }
-  ENSURE(lcd_take_snapshot(c->lcd, img, auto_rotate) == RET_OK);
   ENSURE(canvas_end_frame(c) == RET_OK);
+  ENSURE(lcd_take_snapshot(c->lcd, img, auto_rotate) == RET_OK);
 #endif /*WITH_NANOVG_GPU*/
 
   if (dialog_highlighter != NULL) {
